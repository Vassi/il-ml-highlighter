{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "IL-ML",
    "patterns": [
        { "include": "#comments" },
        { "include": "#system_ping" },
        { "include": "#explicit_blocks" },
        { "include": "#group_envelopes" },
        { "include": "#directives" },
        { "include": "#sub_blocks" },
        { "include": "#variables" }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.slash.il-ml",
                    "match": "^\\s*/(?!/\\*|#).*$"
                },
                {
                    "name": "comment.block.il-ml",
                    "begin": "/\\*",
                    "end": "\\*/",
                    "beginCaptures": {
                        "0": { "name": "punctuation.definition.comment.begin.il-ml" }
                    },
                    "endCaptures": {
                        "0": { "name": "punctuation.definition.comment.end.il-ml" }
                    }
                },
                {
                    "name": "comment.block.section.il-ml",
                    "match": "^\\s*//===.*===//\\s*$"
                }
            ]
        },
        "system_ping": {
            "patterns": [
                {
                    "name": "meta.system.ping.il-ml",
                    "match": "^\\s*(!)\\s+(.*)$",
                    "captures": {
                        "1": { "name": "keyword.control.system.il-ml" },
                        "2": { "name": "string.unquoted.system.il-ml" }
                    }
                }
            ]
        },
        "explicit_blocks": {
            "patterns": [
                {
                    "name": "meta.block.explicit.il-ml",
                    "match": "^(\\s*)(\\/# )\\s*([A-Z]+)(:)\\s*(.*)$",
                    "captures": {
                        "2": { "name": "punctuation.definition.block.begin.il-ml" },
                        "3": { "name": "entity.name.type.class.il-ml" },
                        "4": { "name": "punctuation.separator.key-value.il-ml" },
                        "5": { "name": "entity.name.function.il-ml" }
                    }
                },
                {
                    "name": "meta.block.end.il-ml",
                    "match": "^(\\s*)(#\\/)\\s*$",
                    "captures": {
                        "2": { "name": "punctuation.definition.block.end.il-ml" }
                    }
                }
            ]
        },
        "group_envelopes": {
            "patterns": [
                {
                    "name": "meta.envelope.start.il-ml",
                    "match": "^\\s*<-([A-Za-z0-9_]+?)_START->\\s*$",
                    "captures": {
                        "0": { "name": "punctuation.definition.envelope.il-ml" },
                        "1": { "name": "entity.name.type.envelope.il-ml" }
                    }
                },
                {
                    "name": "meta.envelope.end.il-ml",
                    "match": "^\\s*<-([A-Za-z0-9_]+?)_END->\\s*$",
                    "captures": {
                        "0": { "name": "punctuation.definition.envelope.il-ml" },
                        "1": { "name": "entity.name.type.envelope.il-ml" }
                    }
                }
            ]
        },
        "directives": {
            "patterns": [
                {
                    "name": "meta.directive.metadata.il-ml",
                    "match": "^\\s*(@)(\\w+)(\\s*:)\\s*(.*)$",
                    "captures": {
                        "1": { "name": "punctuation.definition.directive.il-ml" },
                        "2": { "name": "keyword.control.directive.il-ml" },
                        "3": { "name": "punctuation.separator.key-value.il-ml" },
                        "4": { "name": "string.unquoted.directive.il-ml" }
                    }
                },
                {
                    "name": "meta.directive.positive.il-ml",
                    "match": "^\\s*(\\+)\\s*(.*)$",
                    "captures": {
                        "1": { "name": "keyword.operator.positive.il-ml" },
                        "2": { "name": "string.unquoted.instruction.il-ml" }
                    }
                },
                {
                    "name": "meta.directive.negative.il-ml",
                    "match": "^\\s*(-)\\s*(.*)$",
                    "captures": {
                        "1": { "name": "keyword.operator.negative.il-ml" },
                        "2": { "name": "string.unquoted.constraint.il-ml" }
                    }
                },
                {
                    "name": "meta.directive.note.il-ml",
                    "match": "^\\s*(~)\\s*(.*)$",
                    "captures": {
                        "1": { "name": "keyword.operator.note.il-ml" },
                        "2": { "name": "string.unquoted.note.il-ml" }
                    }
                },
                {
                    "name": "meta.directive.purpose.il-ml",
                    "match": "^\\s*(\\?)\\s*(.*)$",
                    "captures": {
                        "1": { "name": "keyword.operator.purpose.il-ml" },
                        "2": { "name": "string.unquoted.purpose.il-ml" }
                    }
                }
            ]
        },
        "sub_blocks": {
            "patterns": [
                {
                    "name": "meta.sub-block.conditional.il-ml",
                    "match": "^\\s*(#{2,})\\s+(.+?)\\s+(\\(if:\\s*.+?\\))\\s*$",
                    "captures": {
                        "1": { "name": "punctuation.definition.heading.il-ml" },
                        "2": { "name": "entity.name.section.il-ml" },
                        "3": { "name": "meta.conditional.il-ml" }
                    }
                },
                {
                    "name": "meta.sub-block.il-ml",
                    "match": "^\\s*(#{2,})\\s+(.*)$",
                    "captures": {
                        "1": { "name": "punctuation.definition.heading.il-ml" },
                        "2": { "name": "entity.name.section.il-ml" }
                    }
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "name": "meta.variable.global.il-ml",
                    "match": "^\\s*(\\$[a-zA-Z_][a-zA-Z0-9_.]*)\\s*(=)\\s*(.*)$",
                    "captures": {
                        "1": { "name": "variable.other.global.il-ml" },
                        "2": { "name": "keyword.operator.assignment.il-ml" },
                        "3": { "name": "string.unquoted.value.il-ml" }
                    }
                },
                {
                    "name": "meta.variable.local.il-ml",
                    "match": "^\\s*(&[a-zA-Z_][a-zA-Z0-9_.]*)\\s*(=)\\s*(.*)$",
                    "captures": {
                        "1": { "name": "variable.other.local.il-ml" },
                        "2": { "name": "keyword.operator.assignment.il-ml" },
                        "3": { "name": "string.unquoted.value.il-ml" }
                    }
                },
                {
                    "name": "variable.other.global.il-ml",
                    "match": "\\$[a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*"
                },
                {
                    "name": "variable.other.local.il-ml",
                    "match": "&[a-zA-Z_][a-zA-Z0-9_]*(?:\\.[a-zA-Z_][a-zA-Z0-9_]*)*"
                }
            ]
        }
    },
    "scopeName": "source.il-ml"
}
